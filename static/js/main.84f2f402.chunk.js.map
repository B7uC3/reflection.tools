{"version":3,"sources":["reflections.js","App.js","reportWebVitals.js","index.js"],"names":["sendersWeCareAbout","uniqueSenders","Object","values","filter","v","i","a","indexOf","colors","reduce","acc","sender","index","length","Reflections","useState","window","location","hash","replace","localStorage","getItem","address","setAddress","debouncedAddress","setDobouncedAddress","result","setResult","errors","setErrors","loading","setLoading","useEffect","timer","setTimeout","trim","setItem","addEventListener","updatedAddress","clearTimeout","gtag","match","fetch","method","headers","body","JSON","stringify","query","variables","then","res","json","totals","incomeCurrencies","sentTotals","data","ethereum","transfers","transfer","date","currency","symbol","amount","includes","push","chartData","forEach","chart","labels","datasets","entries","label","Math","round","toLocaleString","backgroundColor","income","set","value","type","onChange","e","target","style","maxWidth","margin","padding","join","href","rel","map","width","height","options","scales","x","stacked","y","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84f2f402.chunk.js","sourcesContent":["import { useState, useEffect, Fragment } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst query = `\n  query ($address: String!) {\n    ethereum(network: bsc) {\n      transfers(receiver: {is: $address}) {\n        amount\n        currency {\n          name\n          symbol\n          tokenId\n          tokenType\n          decimals\n          address\n        }\n        date {\n          date\n        }\n        transaction {\n          hash\n          txFrom {\n            address\n          }\n        }\n        sender {\n          address\n          annotation\n          smartContract {\n            currency {\n              name\n            }\n            contractType\n          }\n        }\n        receiver {\n          address\n        }\n      }\n    }\n  }\n`;\n\nconst sendersWeCareAbout = {\n  \"0xfbab1d829e36efbd13642229eae2964004f38c41\": \"Evergrow\",\n  \"0x9aacfd4ff2a965779cff25e370b89b788222e6b9\": \"Crypter\",\n  \"0xfdac78ff52dead5a5f0b89b32a8ea66a01979f31\": \"Reflecto\",\n  \"0xdedf5fa8ec49255bc2c7bfadcd18be2c0d228f99\": \"Reflecto\",\n  \"0x7bda2f125b0e63bb332e1e6342be381e28efaeb6\": \"Reflecto\",\n  \"0xd93a7af8d6292030947b13dd2942a8d2baca649b\": \"Santa Coin\",\n  \"0x62c73478676848b96b729a3f2e25412735154df0\": \"Corsac\",\n  \"0x35074b2ab33048c84f37744484ee63e469dc68b8\": \"Techno Floki\",\n  \"0xf8b814824efd4a2d238fcaa46f608bfd18236e8c\": \"ForeverGrow\",\n};\n\nconst uniqueSenders = Object.values(sendersWeCareAbout).filter(\n  (v, i, a) => a.indexOf(v) === i\n);\n\nconst colors = uniqueSenders.reduce((acc, sender, index) => {\n  acc[sender] = `hsl(${(index / uniqueSenders.length) * 270} 100% 50%)`;\n  return acc;\n}, {});\n\nexport function Reflections() {\n  const [address, setAddress] = useState(() => {\n    return window.location.hash.replace('#', '') || localStorage.getItem(\"walletAddress\") || '';\n  });\n  const [debouncedAddress, setDobouncedAddress] = useState(address);\n  const [result, setResult] = useState(address);\n  const [errors, setErrors] = useState();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDobouncedAddress(address.trim());\n    }, 500);\n    localStorage.setItem(\"walletAddress\", address);\n    window.addEventListener('hashchange', () => {\n      const updatedAddress = window.location.hash.replace('#', '');\n      if (updatedAddress !== address) {\n        setAddress(updatedAddress);\n        setDobouncedAddress(updatedAddress);\n      }\n    });\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [address]);\n\n  useEffect(() => {\n\n    window.location.hash = debouncedAddress;\n\n    if (debouncedAddress === '') {\n      window.gtag('event', 'empty-wallet-address');\n      setLoading(false);\n      setErrors(false);\n      setResult(null);\n      return;\n    } else if (!debouncedAddress.match(/^0x[A-Za-z0-9]{40}$/)) {\n      setErrors(\"Invalid wallet address.\");\n      setLoading(false);\n      setResult(null);\n      window.gtag('event', 'invalid-wallet-address');\n      return;\n    }\n\n    window.gtag('event', 'lookup-wallet-address');\n\n    setLoading(true);\n    setErrors(false);\n    fetch(\"https://graphql.bitquery.io/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query,\n        variables: JSON.stringify({\n          address: debouncedAddress\n        })\n      })\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setLoading(false);\n        if (res.errors) {\n          window.gtag('event', 'data-lookup-error');\n          setErrors(res.errors);\n          setResult(null);\n          return;\n        }\n\n        const totals = {};\n        const incomeCurrencies = [];\n\n        const sentTotals = res.data.ethereum.transfers.reduce(\n          (acc, transfer) => {\n            const sender = sendersWeCareAbout[transfer.sender.address];\n            if (!sender) return acc;\n            const date = transfer.date.date;\n            const currency = transfer.currency.symbol;\n            acc[date] = acc[date] || {};\n            acc[date][currency] = acc[date][currency] || {};\n            acc[date][currency][sender] = acc[date][currency][sender] || 0;\n            acc[date][currency][sender] += transfer.amount;\n            if (!incomeCurrencies.includes(currency))\n              incomeCurrencies.push(currency);\n            totals[currency] = totals[currency] || {};\n            totals[currency][sender] = (totals[currency][sender] || 0) + transfer.amount;\n            return acc;\n          },\n          {}\n        );\n\n        const chartData = {};\n\n        incomeCurrencies.forEach((currency) => {\n          const chart = (chartData[currency] = {\n            labels: [],\n            datasets: {}\n          });\n          Object.entries(sentTotals).forEach(([date, income]) => {\n            chart.labels.push(date);\n          });\n          uniqueSenders.forEach((sender) => {\n            chart.datasets[sender] = {\n              label: `${sender} (${Math.round(totals[currency][sender]).toLocaleString()})`,\n              backgroundColor: colors[sender],\n              data: []\n            };\n          });\n        });\n\n        Object.entries(sentTotals).forEach(([date, income]) => {\n          incomeCurrencies.forEach((currency) => {\n            uniqueSenders.forEach((sender) => {\n              chartData[currency].datasets[sender].data.push(\n                income[currency]?.[sender] || 0\n              );\n            });\n          });\n        });\n\n        incomeCurrencies.forEach((currency) => {\n          const chart = chartData[currency];\n          chart.datasets = Object.values(chart.datasets).filter((set) => {\n            const sum = set.data.reduce((acc, value) => acc + value, 0);\n            return sum > 0;\n          });\n        });\n\n        setResult(chartData);\n      });\n  }, [debouncedAddress]);\n\n  return (\n    <>\n      <p>Enter your wallet address</p>\n      <input\n        type=\"text\"\n        value={address}\n        onChange={(e) => setAddress(e.target.value)}\n      />\n      <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\n        {debouncedAddress === \"\" ? (\n          <>\n            <p>This tool will fetch data about reflective tokens ({uniqueSenders.join(', ')}), and display how much you're eaching from and in each token in a single place.</p>\n            <p>When you enter in your address, your browser makes a graphql query directly to https://graphql.bitquery.io/ to fetch all of your transactions, which are then processed into very pretty graphs for your viewing pleasure. Data may or may not be up-to-date - that entirely depends on bitquery.</p>\n            <p>There's a good chance this tool might break sometime. It's just been hacked together in a few hours so far, and is not using any API key for Bitquery, so they could block this if we end up sending too many requests.</p>\n            <p>Feel free to log any issues <a href=\"https://github.com/joelcox22/reflection.tools/issues\" target=\"_blank\" rel=\"noreferrer\">in Github Issues</a>. <a href=\"https://github.com/joelcox22/reflection.tools\" target=\"_blank\" rel=\"noreferrer\">Full source code is available there too</a>.</p>\n            <p>Google analytics is setup purely so I can see how many people use this and if it's worth continuing development. Cookies are disabled - it's only interaction events with the page being logged.</p>\n            <p>Pull requests are welcome if anyone wants to help out or add more tokens.</p>\n            <p>I'd love to find a way to also fetch and display pending rewards from all of these tokens - if anyone knows how, please let me know via a Github Issue or something.</p>\n          </>\n        ) : errors ? (\n          <pre>{JSON.stringify(errors, null, 4)}</pre>\n        ) : loading ? (\n          <p>Loading...</p>\n        ) : (\n          result && Object.entries(result).map(([currency, chart]) => (\n            <Fragment key={currency}>\n              <h1>{currency}</h1>\n              <Bar\n                data={chart}\n                width={100}\n                height={50}\n                options={{\n                  scales: {\n                    x: {\n                      stacked: true\n                    },\n                    y: {\n                      stacked: true\n                    }\n                  }\n                }}\n              />\n            </Fragment>\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n","import { Reflections } from './reflections';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Crypto Reflections\n        </h1>\n      </header>\n    <Reflections />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}